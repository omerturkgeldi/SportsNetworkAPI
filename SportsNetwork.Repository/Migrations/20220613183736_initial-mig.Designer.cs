// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SportsNetwork.Repository;

#nullable disable

namespace SportsNetwork.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220613183736_initial-mig")]
    partial class initialmig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Bildirimler.Bildirim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BildirimBasligi")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BildirimIcerik")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("BildirimTip")
                        .HasColumnType("text");

                    b.Property<string>("EkleyenKullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EkleyenKullaniciFk");

                    b.ToTable("bildirimler", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Bildirimler.KullaniciBildirim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BildirimFk")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IletilmeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("OkunduMu")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OkunmaTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BildirimFk");

                    b.HasIndex("KullaniciFk");

                    b.ToTable("kullanici_bildirimleri", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Dersler.Ders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Baslik")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EgitmenFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Konum")
                        .HasColumnType("text");

                    b.Property<string>("KonumIsmi")
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("SaatlikUcret")
                        .HasColumnType("numeric");

                    b.Property<int>("SehirFk")
                        .HasColumnType("integer");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.Property<int>("SporFk")
                        .HasColumnType("integer");

                    b.Property<int>("TesisFk")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EgitmenFk");

                    b.HasIndex("SehirFk");

                    b.HasIndex("SporFk");

                    b.HasIndex("TesisFk");

                    b.ToTable("dersler", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Dersler.DersRezervasyon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BaslangicTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("BitisTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DersFk")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KursiyerKullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Onay")
                        .HasColumnType("boolean");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DersFk");

                    b.HasIndex("KursiyerKullaniciFk");

                    b.ToTable("ders_rezervasyonlari", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Etkinlikler.Etkinlik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte>("Durum")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KullaniciFk")
                        .HasColumnType("text");

                    b.Property<string>("OlusturanKullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SehirFk")
                        .HasColumnType("integer");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.Property<int>("SporFk")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OlusturanKullaniciFk");

                    b.HasIndex("SehirFk");

                    b.HasIndex("SporFk");

                    b.ToTable("etkinlikler", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Etkinlikler.EtkinlikDetay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("text");

                    b.Property<int>("EtkinlikFk")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Konum")
                        .HasColumnType("text");

                    b.Property<string>("KonumIsmi")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Seviye")
                        .HasColumnType("smallint");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.Property<int>("TesisFk")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EtkinlikFk")
                        .IsUnique();

                    b.HasIndex("TesisFk");

                    b.ToTable("etkinlik_detaylari", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Etkinlikler.EtkinlikKatilimci", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EtkinlikFk")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EtkinlikFk");

                    b.HasIndex("KullaniciFk");

                    b.ToTable("etkinlik_katilimcilari", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Etkinlikler.EtkinlikYorum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EtkinlikFk")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.Property<string>("Yorum")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EtkinlikFk");

                    b.HasIndex("KullaniciFk");

                    b.ToTable("etkinlik_yorumlari", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Etkinlikler.EtkinlikYorumBegeni", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EtkinlikFk")
                        .HasColumnType("integer");

                    b.Property<int?>("EtkinlikYorumId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EtkinlikFk");

                    b.HasIndex("EtkinlikYorumId");

                    b.HasIndex("KullaniciFk");

                    b.ToTable("etkinlik_yorum_begenileri", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Gruplar.Grup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("text");

                    b.Property<string>("GrupIsmi")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KullaniciFk")
                        .HasColumnType("text");

                    b.Property<string>("OlusturanKullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("OlusturanKullaniciFk");

                    b.ToTable("gruplar", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Gruplar.GrupKullanici", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AdminMi")
                        .HasColumnType("boolean");

                    b.Property<int>("GrupFk")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("GrupFk");

                    b.HasIndex("KullaniciFk");

                    b.ToTable("grup_kullanicilari", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Iliskiler.Iliski", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IliskiStatuFk")
                        .HasColumnType("integer");

                    b.Property<string>("Kullanici1Fk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kullanici2Fk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IliskiStatuFk");

                    b.HasIndex("Kullanici1Fk");

                    b.HasIndex("Kullanici2Fk");

                    b.ToTable("iliskiler", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Iliskiler.IliskiStatu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.Property<string>("Tip")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("iliski_statuleri", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Mesajlar.GrupMesaj", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GrupFk")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mesaj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("GrupFk");

                    b.HasIndex("KullaniciFk");

                    b.ToTable("grup_mesajlari", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Mesajlar.OzelMesaj", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Kullanici1Fk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kullanici2Fk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mesaj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Kullanici1Fk");

                    b.HasIndex("Kullanici2Fk");

                    b.ToTable("ozel_mesajlar", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Puanlama", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Kullanici1Fk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kullanici2Fk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Puan")
                        .HasColumnType("smallint");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.Property<string>("Yorum")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Kullanici1Fk");

                    b.HasIndex("Kullanici2Fk");

                    b.ToTable("puanlamalar", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Sehir", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlakaNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SehirIsmi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PlakaNo")
                        .IsUnique();

                    b.ToTable("sehirler", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Sonuc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EtkinlikFk")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.Property<string>("SonucJson")
                        .HasColumnType("jsonb");

                    b.Property<int>("SporFk")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EtkinlikFk")
                        .IsUnique();

                    b.HasIndex("KullaniciFk");

                    b.HasIndex("SporFk");

                    b.ToTable("sonuclar", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Spor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("sporlar", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Tesisler.Tesis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("text");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Isim")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Konum")
                        .HasColumnType("text");

                    b.Property<string>("KonumAdres")
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SehirFk")
                        .HasColumnType("integer");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.Property<string>("TesisSahibiFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SehirFk");

                    b.HasIndex("TesisSahibiFk");

                    b.ToTable("tesisler", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Tesisler.TesisRezervasyon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BaslangicTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("BitisTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Onay")
                        .HasColumnType("boolean");

                    b.Property<string>("RezerveEdenKullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.Property<int>("TesisFk")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RezerveEdenKullaniciFk");

                    b.HasIndex("TesisFk");

                    b.ToTable("tesis_rezervasyonlari", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Tesisler.TesisYorum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.Property<int>("TesisFk")
                        .HasColumnType("integer");

                    b.Property<string>("Yorum")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("KullaniciFk");

                    b.HasIndex("TesisFk");

                    b.ToTable("tesis_yorumlari", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Tesisler.TesisYorumBegeni", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("GuncellemeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("KullaniciFk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OlusturulanTarih")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SilindiMi")
                        .HasColumnType("boolean");

                    b.Property<int>("TesisYorumFk")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KullaniciFk");

                    b.HasIndex("TesisYorumFk");

                    b.ToTable("tesis_yorum_begenileri", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.UserApp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.UserRefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("SportsNetwork.Data.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Application")
                        .HasColumnType("text");

                    b.Property<string>("Callsite")
                        .HasColumnType("text");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<string>("Logged")
                        .HasColumnType("text");

                    b.Property<string>("Logger")
                        .HasColumnType("text");

                    b.Property<string>("MachineName")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Loglar");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.UserApp", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Bildirimler.Bildirim", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.UserApp", "EkleyenKullanici")
                        .WithMany("Bildirimler")
                        .HasForeignKey("EkleyenKullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EkleyenKullanici");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Bildirimler.KullaniciBildirim", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.Bildirimler.Bildirim", "Bildirim")
                        .WithMany("KullaniciBildirimler")
                        .HasForeignKey("BildirimFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici")
                        .WithMany("KullaniciBildirimler")
                        .HasForeignKey("KullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bildirim");

                    b.Navigation("Kullanici");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Dersler.Ders", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Egitmen")
                        .WithMany("Dersler")
                        .HasForeignKey("EgitmenFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.Sehir", "Sehir")
                        .WithMany("Dersler")
                        .HasForeignKey("SehirFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.Spor", "Spor")
                        .WithMany("Dersler")
                        .HasForeignKey("SporFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.Tesisler.Tesis", "Tesis")
                        .WithMany("Dersler")
                        .HasForeignKey("TesisFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Egitmen");

                    b.Navigation("Sehir");

                    b.Navigation("Spor");

                    b.Navigation("Tesis");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Dersler.DersRezervasyon", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.Dersler.Ders", "Ders")
                        .WithMany("DersRezervasyonlar")
                        .HasForeignKey("DersFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.UserApp", "KursiyerKullanici")
                        .WithMany("DersRezervasyonlar")
                        .HasForeignKey("KursiyerKullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ders");

                    b.Navigation("KursiyerKullanici");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Etkinlikler.Etkinlik", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.UserApp", "OlusturanKullanici")
                        .WithMany("Etkinlikler")
                        .HasForeignKey("OlusturanKullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.Sehir", "Sehir")
                        .WithMany("Etkinlikler")
                        .HasForeignKey("SehirFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.Spor", "Spor")
                        .WithMany("Etkinlikler")
                        .HasForeignKey("SporFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OlusturanKullanici");

                    b.Navigation("Sehir");

                    b.Navigation("Spor");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Etkinlikler.EtkinlikDetay", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.Etkinlikler.Etkinlik", "Etkinlik")
                        .WithOne("EtkinlikDetay")
                        .HasForeignKey("SportsNetwork.Core.Models.Etkinlikler.EtkinlikDetay", "EtkinlikFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.Tesisler.Tesis", "Tesis")
                        .WithMany("EtkinlikDetaylar")
                        .HasForeignKey("TesisFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etkinlik");

                    b.Navigation("Tesis");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Etkinlikler.EtkinlikKatilimci", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.Etkinlikler.Etkinlik", "Etkinlik")
                        .WithMany("EtkinlikKatilimcilar")
                        .HasForeignKey("EtkinlikFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici")
                        .WithMany("EtkinlikKatilimcilar")
                        .HasForeignKey("KullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etkinlik");

                    b.Navigation("Kullanici");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Etkinlikler.EtkinlikYorum", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.Etkinlikler.Etkinlik", "Etkinlik")
                        .WithMany("EtkinlikYorumlar")
                        .HasForeignKey("EtkinlikFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici")
                        .WithMany("EtkinlikYorumlar")
                        .HasForeignKey("KullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etkinlik");

                    b.Navigation("Kullanici");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Etkinlikler.EtkinlikYorumBegeni", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.Etkinlikler.Etkinlik", "Etkinlik")
                        .WithMany("EtkinlikYorumBegeniler")
                        .HasForeignKey("EtkinlikFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.Etkinlikler.EtkinlikYorum", null)
                        .WithMany("EtkinlikYorumBegeniler")
                        .HasForeignKey("EtkinlikYorumId");

                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici")
                        .WithMany("EtkinlikYorumBegeniler")
                        .HasForeignKey("KullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etkinlik");

                    b.Navigation("Kullanici");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Gruplar.Grup", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.UserApp", "OlusturanKullanici")
                        .WithMany("Gruplar")
                        .HasForeignKey("OlusturanKullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OlusturanKullanici");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Gruplar.GrupKullanici", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.Gruplar.Grup", "Grup")
                        .WithMany("GrupKullanicilar")
                        .HasForeignKey("GrupFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici")
                        .WithMany("GrupKullanicilar")
                        .HasForeignKey("KullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grup");

                    b.Navigation("Kullanici");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Iliskiler.Iliski", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.Iliskiler.IliskiStatu", "IliskiStatu")
                        .WithMany("Iliskiler")
                        .HasForeignKey("IliskiStatuFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici1")
                        .WithMany()
                        .HasForeignKey("Kullanici1Fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici2")
                        .WithMany()
                        .HasForeignKey("Kullanici2Fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IliskiStatu");

                    b.Navigation("Kullanici1");

                    b.Navigation("Kullanici2");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Mesajlar.GrupMesaj", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.Gruplar.Grup", "Grup")
                        .WithMany("GrupMesajlar")
                        .HasForeignKey("GrupFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici")
                        .WithMany("GrupMesajlar")
                        .HasForeignKey("KullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grup");

                    b.Navigation("Kullanici");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Mesajlar.OzelMesaj", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici1")
                        .WithMany()
                        .HasForeignKey("Kullanici1Fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici2")
                        .WithMany()
                        .HasForeignKey("Kullanici2Fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kullanici1");

                    b.Navigation("Kullanici2");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Puanlama", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici1")
                        .WithMany()
                        .HasForeignKey("Kullanici1Fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici2")
                        .WithMany()
                        .HasForeignKey("Kullanici2Fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kullanici1");

                    b.Navigation("Kullanici2");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Sonuc", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.Etkinlikler.Etkinlik", "Etkinlik")
                        .WithOne("Sonuc")
                        .HasForeignKey("SportsNetwork.Core.Models.Sonuc", "EtkinlikFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici")
                        .WithMany("Sonuclar")
                        .HasForeignKey("KullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.Spor", "Spor")
                        .WithMany("Sonuclar")
                        .HasForeignKey("SporFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etkinlik");

                    b.Navigation("Kullanici");

                    b.Navigation("Spor");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Tesisler.Tesis", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.Sehir", "Sehir")
                        .WithMany("Tesisler")
                        .HasForeignKey("SehirFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.UserApp", "TesisSahibi")
                        .WithMany("Tesisler")
                        .HasForeignKey("TesisSahibiFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sehir");

                    b.Navigation("TesisSahibi");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Tesisler.TesisRezervasyon", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.UserApp", "RezerveEdenKullanici")
                        .WithMany("TesisRezervasyonlar")
                        .HasForeignKey("RezerveEdenKullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.Tesisler.Tesis", "Tesis")
                        .WithMany("TesisRezervasyonlar")
                        .HasForeignKey("TesisFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RezerveEdenKullanici");

                    b.Navigation("Tesis");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Tesisler.TesisYorum", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici")
                        .WithMany("TesisYorumlar")
                        .HasForeignKey("KullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.Tesisler.Tesis", "Tesis")
                        .WithMany("TesisYorumlar")
                        .HasForeignKey("TesisFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kullanici");

                    b.Navigation("Tesis");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Tesisler.TesisYorumBegeni", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici")
                        .WithMany("TesisYorumBegeniler")
                        .HasForeignKey("KullaniciFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsNetwork.Core.Models.Tesisler.TesisYorum", "TesisYorum")
                        .WithMany("TesisYorumBegeniler")
                        .HasForeignKey("TesisYorumFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kullanici");

                    b.Navigation("TesisYorum");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.UserRefreshToken", b =>
                {
                    b.HasOne("SportsNetwork.Core.Models.UserApp", "Kullanici")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kullanici");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Bildirimler.Bildirim", b =>
                {
                    b.Navigation("KullaniciBildirimler");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Dersler.Ders", b =>
                {
                    b.Navigation("DersRezervasyonlar");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Etkinlikler.Etkinlik", b =>
                {
                    b.Navigation("EtkinlikDetay");

                    b.Navigation("EtkinlikKatilimcilar");

                    b.Navigation("EtkinlikYorumBegeniler");

                    b.Navigation("EtkinlikYorumlar");

                    b.Navigation("Sonuc");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Etkinlikler.EtkinlikYorum", b =>
                {
                    b.Navigation("EtkinlikYorumBegeniler");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Gruplar.Grup", b =>
                {
                    b.Navigation("GrupKullanicilar");

                    b.Navigation("GrupMesajlar");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Iliskiler.IliskiStatu", b =>
                {
                    b.Navigation("Iliskiler");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Sehir", b =>
                {
                    b.Navigation("Dersler");

                    b.Navigation("Etkinlikler");

                    b.Navigation("Tesisler");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Spor", b =>
                {
                    b.Navigation("Dersler");

                    b.Navigation("Etkinlikler");

                    b.Navigation("Sonuclar");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Tesisler.Tesis", b =>
                {
                    b.Navigation("Dersler");

                    b.Navigation("EtkinlikDetaylar");

                    b.Navigation("TesisRezervasyonlar");

                    b.Navigation("TesisYorumlar");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.Tesisler.TesisYorum", b =>
                {
                    b.Navigation("TesisYorumBegeniler");
                });

            modelBuilder.Entity("SportsNetwork.Core.Models.UserApp", b =>
                {
                    b.Navigation("Bildirimler");

                    b.Navigation("DersRezervasyonlar");

                    b.Navigation("Dersler");

                    b.Navigation("EtkinlikKatilimcilar");

                    b.Navigation("EtkinlikYorumBegeniler");

                    b.Navigation("EtkinlikYorumlar");

                    b.Navigation("Etkinlikler");

                    b.Navigation("GrupKullanicilar");

                    b.Navigation("GrupMesajlar");

                    b.Navigation("Gruplar");

                    b.Navigation("KullaniciBildirimler");

                    b.Navigation("Sonuclar");

                    b.Navigation("TesisRezervasyonlar");

                    b.Navigation("TesisYorumBegeniler");

                    b.Navigation("TesisYorumlar");

                    b.Navigation("Tesisler");
                });
#pragma warning restore 612, 618
        }
    }
}
